stages:
  - prepare
  - install
  - build
  - package
  - deploy
image: node:14.17.0

variables:
  APOLLO_APP_ID: $CI_PROJECT_NAME
  CI_REGISTRY: 900133445010.dkr.ecr.ap-southeast-1.amazonaws.com
  IMAGE_RETENION_COUNT: 1000

default:
  tags:
    - dockermachine
    - reinvent
    - autoscaling

cache:
  key:
    files:
      - yarn.lock
  policy: pull-push
  untracked: true

prepare:
  stage: prepare
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  script:
    - IMAGE_NAME=`echo $CI_PROJECT_PATH | tr '[:upper:]' '[:lower:]'`
    - IMAGE_RETENION_COUNT=$IMAGE_RETENION_COUNT
    - IMAGE_REPO="$CI_REGISTRY/$IMAGE_NAME"
    - aws ecr create-repository  --region ap-southeast-1 --repository-name $IMAGE_NAME &> /dev/null || echo "ecr repo already exist"
    - aws ecr put-lifecycle-policy --region ap-southeast-1 --repository-name $IMAGE_NAME --lifecycle-policy-text "{\"rules\":[{\"rulePriority\":1,\"description\":\"keep some\",\"selection\":{\"tagStatus\":\"tagged\",\"tagPrefixList\":[\"branch\"],\"countType\":\"imageCountMoreThan\",\"countNumber\":$IMAGE_RETENION_COUNT},\"action\":{\"type\":\"expire\"}}]}"
    - echo ewogICJWZXJzaW9uIjogIjIwMDgtMTAtMTciLAogICJTdGF0ZW1lbnQiOiBbCiAgICB7CiAgICAgICJTaWQiOiAiQWxsb3dQdXNoUHVsbCIsCiAgICAgICJFZmZlY3QiOiAiQWxsb3ciLAogICAgICAiUHJpbmNpcGFsIjogewogICAgICAgICJBV1MiOiAiYXJuOmF3czppYW06Ojg4Mjc3Nzg4NTEzNDpyb290IgogICAgICB9LAogICAgICAiQWN0aW9uIjogWwogICAgICAgICJlY3I6R2V0RG93bmxvYWRVcmxGb3JMYXllciIsCiAgICAgICAgImVjcjpCYXRjaEdldEltYWdlIiwKICAgICAgICAiZWNyOkJhdGNoQ2hlY2tMYXllckF2YWlsYWJpbGl0eSIsCiAgICAgICAgImVjcjpQdXRJbWFnZSIsCiAgICAgICAgImVjcjpJbml0aWF0ZUxheWVyVXBsb2FkIiwKICAgICAgICAiZWNyOlVwbG9hZExheWVyUGFydCIsCiAgICAgICAgImVjcjpDb21wbGV0ZUxheWVyVXBsb2FkIgogICAgICBdCiAgICB9CiAgXQp9Cg== | base64 -d > ecr-policy.json
    - aws ecr set-repository-policy --region ap-southeast-1 --repository-name $IMAGE_NAME --policy-text file://ecr-policy.json
    - ECR_AUTH_TOKEN=`aws ecr get-login-password --region ap-southeast-1`
    - CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain reinvent --domain-owner 900133445010 --query authorizationToken --output text`
    - echo "IMAGE_REPO=$IMAGE_REPO" >> build.env
    - echo "IMAGE_TAG=$IMAGE_REPO:$CI_COMMIT_SHORT_SHA" >> build.env
    - echo "ECR_AUTH_TOKEN=$ECR_AUTH_TOKEN" >> build.env
    - echo "CODEARTIFACT_AUTH_TOKEN=$CODEARTIFACT_AUTH_TOKEN" >> build.env
  artifacts:
    reports:
      dotenv: build.env
  cache: { }

install:
  stage: install
  script:
    - yarn
  cache:
    key:
      files:
        - yarn.lock
    policy: pull-push
    paths:
      - node_modules

.build_artifacts:
  stage: build
  artifacts:
    name: "$CI_JOB_STAGE-$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    when: on_success
    expire_in: 1d
    paths:
      - public/
      - package.json
      - .next/

build_dev:
  extends: .build_artifacts
  variables:
    NODE_ENV: development
  only:
    - master
    - /^release/.*$/
    - /^feature/.*$/
  script:
    - yarn run build:dev

build_test:
  extends: .build_artifacts
  variables:
    NODE_ENV: test
  only:
    - master
    - /^release/.*$/
    - /^feature/.*$/
  script:
    - yarn run build:test
  when: manual

build_staging:
  extends: .build_artifacts
  variables:
    NODE_ENV: staging
  only:
    - master
    - /^release/.*$/
    - /^feature/.*$/
  script:
    - yarn run build:staging
  when: manual

build_production:
  extends: .build_artifacts
  variables:
    NODE_ENV: production
  only:
    - master
    - tags
    - release
    - /^feature/.*$/
  script:
    - yarn run build:prod
  when: manual

.docker-build:
  image: docker:19.03.11
  stage: package
  services:
    - docker:19.03.11-dind
  script:
    # - ls -a
    - echo $ECR_AUTH_TOKEN
    - echo $CI_REGISTRY
    - docker login -u AWS -p $ECR_AUTH_TOKEN $CI_REGISTRY
    - docker pull $IMAGE_REPO:latest || true
    - docker build --cache-from $IMAGE_REPO:latest --build-arg NODE_ENV=$NODE_ENV --tag $IMAGE_TAG --tag $IMAGE_REPO:latest --tag $IMAGE_REPO:branch-$CI_COMMIT_SHORT_SHA .
    - if [ $CI_COMMIT_REF_NAME != "master" ]; then docker push $IMAGE_REPO:branch-$CI_COMMIT_SHORT_SHA; fi
    - docker push $IMAGE_TAG
    - docker push $IMAGE_REPO:latest
  only:
    - /^release/.*$/
    - /^hotfix/.*$/
    - master

package_dev:
  extends: .docker-build
  variables:
    NODE_ENV: development
  dependencies:
    - prepare
    - build_dev
  only:
    - master
    - /^release/.*$/
    - /^feature/.*$/

package_test:
  extends: .docker-build
  variables:
    NODE_ENV: test
  dependencies:
    - prepare
    - build_test
  only:
    - master
    - /^release/.*$/
    - /^feature/.*$/
  when: manual

package_staging:
  extends: .docker-build
  variables:
    NODE_ENV: staging
  dependencies:
    - prepare
    - build_staging
  only:
    - master
    - /^release/.*$/
    - /^feature/.*$/
  when: manual

package_production:
  extends: .docker-build
  variables:
    NODE_ENV: production
  dependencies:
    - prepare
    - build_production
  only:
    - master
    - /^release/.*$/
    - /^feature/.*$/
  when: manual

.k8s-deploy:
  image:
    name: alpine/helm:3.1.3
    entrypoint: [""]
  stage: deploy
  variables:
    NODE_ENV: production
    K8S_NAMESPACE: boss
    HOST_NAME: "www-dev.getbossbuilding.com"
    ISTIO_ENABLED: "true"
  before_script:
    - HELM_VARIABLES="--set"
    - HELM_VARIABLES="$HELM_VARIABLES image.repository=$IMAGE_REPO"
    - HELM_VARIABLES="$HELM_VARIABLES,image.tag=$CI_COMMIT_SHORT_SHA"
    - HELM_VARIABLES="$HELM_VARIABLES,istio.enabled=$ISTIO_ENABLED"
    - HELM_VARIABLES="$HELM_VARIABLES,istio.hosts=$HOST_NAME"
    - HELM_VARIABLES="$HELM_VARIABLES,fullnameOverride=$CI_PROJECT_NAME"
    - HELM_VARIABLES="$HELM_VARIABLES,env.NODE_ENV=$NODE_ENV"
    - export HELM_OPTIONS=$HELM_VARIABLES$(if [ "$CI_HELM_DEBUG" = true ]; then echo " --debug"; else echo ""; fi)
    - helm lint chart $HELM_OPTIONS # make sure helm being configured correctly
  script:
    - echo "$HELM_OPTIONS"
    - echo "$K8S_NAMESPACE"
    - helm upgrade --install --force $CI_PROJECT_NAME chart -n $K8S_NAMESPACE $HELM_OPTIONS --dry-run # print helm details by dry run
    - helm upgrade --install --force $CI_PROJECT_NAME chart -n $K8S_NAMESPACE $HELM_OPTIONS
  environment:
    name: $ENVIRONMENT
    url: https://$HOST_NAME
  only:
    - not_existed_branch
  allow_failure: false

# deploy to dev
dev-deploy:
  extends: .k8s-deploy
  variables:
    ENVIRONMENT: reinvent-dev
    NODE_ENV: development
    K8S_NAMESPACE: boss
    HOST_NAME: "www-dev.getbossbuilding.com"
    ISTIO_ENABLED: "true"
  only:
    - master
    - /^release/.*$/
    - /^feature/.*$/

test-deploy:
  extends: .k8s-deploy
  variables:
    ENVIRONMENT: reinvent-qa
    NODE_ENV: test
    K8S_NAMESPACE: boss
    HOST_NAME: "www-test.getbossbuilding.com"
    ISTIO_ENABLED: "true"
  only:
    - master
    - /^release/.*$/
    - /^feature/.*$/
  when: manual

staging-deploy:
  extends: .k8s-deploy
  variables:
    ENVIRONMENT: flexi-boss-staging
    K8S_NAMESPACE: app
    NODE_ENV: staging
    HOST_NAME: "www-staging.getbossbuilding.com"
    ISTIO_ENABLED: "true"
  only:
    - master
    - /^release/.*$/
    - /^feature/.*$/
  when: manual


production-deploy:
  extends: .k8s-deploy
  variables:
    ENVIRONMENT: flexi-boss-prod
    NODE_ENV: production
    K8S_NAMESPACE: app
    HOST_NAME: "www.getbossbuilding.com"
    ISTIO_ENABLED: "true"
  only:
    - master
    - /^release/.*$/
    - /^feature/.*$/
  when: manual
